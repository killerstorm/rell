@test module;

import run_tests.bar;
import run_tests.common;
import run_tests.test_utils;

function test_module_args() {
    val args = bar.get_module_args();
    log('args =', args);
    assert_equals(args.y, 'Hello');
}

function test_common_module_args() {
    val args = common.get_module_args();
    log('args =', args);
    assert_equals(args.user, 'Trudy');
}

function test_common_user() {
    val user = common.get_common_user();
    log('user =', user);
    assert_equals(user, 'Trudy');
}

function test_create_data() {
    test_utils.assert_no_data();

    val tx = rell.test.tx(bar.create_data('bar_test'));
    test_utils.assert_no_data();

    tx.run();
    test_utils.assert_one_data('bar', -1, 'Hello', 'Trudy', 'bar_test');
}

function test_common_create_data() {
    test_utils.assert_no_data();

    val tx = rell.test.tx(common.create_data(-1, 'Test', 'bar_common_test'));
    test_utils.assert_no_data();

    tx.run();
    test_utils.assert_one_data('common', -1, 'Test', 'Trudy', 'bar_common_test');
}

function test_nop() {
    rell.test.tx()
        .op(rell.test.op('nop'))
        .op(common.create_data(-1, 'Test', 'bar_common_test'))
        .run();

    rell.test.tx()
        .op(rell.test.op('nop', (123).to_gtv()))
        .op(common.create_data(-1, 'Test', 'bar_common_test'))
        .run();

    rell.test.tx()
        .op(rell.test.op('nop', 'Hello'.to_gtv()))
        .op(common.create_data(-1, 'Test', 'bar_common_test'))
        .run();

    rell.test.tx()
        .nop()
        .op(common.create_data(-1, 'Test', 'bar_common_test'))
        .run();

    rell.test.tx()
        .nop()
        .op(common.create_data(-1, 'Test', 'bar_common_test'))
        .run();
}
