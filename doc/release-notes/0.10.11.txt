RELEASE NOTES 0.10.11 (2022-??-??)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1. Language: "list", "set", "map" keywords removed.

Words "list", "set" and "map" are now regular names, not keywords. Not a significant change, but a step towards
supporting arbitrary generic library types in the future.

Practical implication: names "list", "set", "map" can be used in code (for variables, attributes, etc.).

Method ._set() of type list<T> was deprecated (with warning) and a new method .set() added to be used instead.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Library: new method "sort" instead of the old "_sort" one.

As keyword "sort" was removed in 0.10.10 (and word "sort" became a regular name), a new method .sort() was added to
replace the old method ._sort() of list<T>. The old method was deprecated (with warning).

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Library: new functions: "repeat", "reverse", "reversed".

list<T>.repeat(n: integer): list<T>

    Returns a new list, which is the old list repeated "n" times. Always creates a new list (even if n = 1).

list<T>.reverse()

    Reverses the list in place, returns nothing.

list<T>.reversed(): list<T>

    Returns a reversed copy of the list. Always creates a new list (even if the old list is empty or has one element).

text.repeat(n: integer): text

    Returns the text repeated "n" times. SQL-compatible.

text.reversed(): text

    Returns a reversed copy of the text. SQL-compatible.

byte_array.repeat(n: integer): byte_array

    Returns the byte array repeated "n" times.

byte_array.reversed(): byte_array

    Returns a reversed copy of the byte array.

* For repeat(n), the argument must be non-negative and less than 2^31, and the size of the resulting value must be less
  than 2^31.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. Library: new functions of type "map": get_or_null(), get_or_default(), remove_or_null()

map<K, V>.get_or_null(key: K): V?

    Returns null if the key is not in the map, otherwise returns the associated value. Unlike .get(K), which throws an
    exception in such case.

map<K, V>.get_or_default(key: K, default_value: V2): V2

    Returns a default value if the key is not in the map, otherwise returns the associated value.
    The type of the default value can be a supertype of "V". For instance, the default value can be "V?" or "null",
    even if "V" is not nullable.

map<K, V>.remove_or_null(key: K): V?

    Removes the specified key from the map. Returns null if the key is not in the map.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
5. Bug fixes

- False "Wrong operand types..." compilation error on expression: T in list<T?>.
